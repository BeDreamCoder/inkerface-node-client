/*eslint-disable*/
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.exportSymbol('proto.protos.ChaincodeDeploymentSpec', null, global);
goog.exportSymbol('proto.protos.ChaincodeDeploymentSpec.ExecutionEnvironment', null, global);
goog.exportSymbol('proto.protos.ChaincodeID', null, global);
goog.exportSymbol('proto.protos.ChaincodeInput', null, global);
goog.exportSymbol('proto.protos.ChaincodeInvocationSpec', null, global);
goog.exportSymbol('proto.protos.ChaincodeSpec', null, global);
goog.exportSymbol('proto.protos.ChaincodeSpec.Type', null, global);
goog.exportSymbol('proto.protos.ConfidentialityLevel', null, global);
goog.exportSymbol('proto.protos.SenderSpec', null, global);
goog.exportSymbol('proto.protos.SignContent', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.ChaincodeID = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protos.ChaincodeID, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.protos.ChaincodeID.displayName = 'proto.protos.ChaincodeID';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.protos.ChaincodeID.prototype.toObject = function (opt_includeInstance) {
        return proto.protos.ChaincodeID.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.protos.ChaincodeID} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.protos.ChaincodeID.toObject = function (includeInstance, msg) {
        var f, obj = {
            path: jspb.Message.getFieldWithDefault(msg, 1, ""),
            name: jspb.Message.getFieldWithDefault(msg, 2, ""),
            version: jspb.Message.getFieldWithDefault(msg, 3, "")
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.ChaincodeID}
 */
proto.protos.ChaincodeID.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.protos.ChaincodeID;
    return proto.protos.ChaincodeID.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.ChaincodeID} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.ChaincodeID}
 */
proto.protos.ChaincodeID.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setPath(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setName(value);
                break;
            case 3:
                var value = /** @type {string} */ (reader.readString());
                msg.setVersion(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.ChaincodeID.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.protos.ChaincodeID.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.ChaincodeID} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.ChaincodeID.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getPath();
    if (f.length > 0) {
        writer.writeString(
            1,
            f
        );
    }
    f = message.getName();
    if (f.length > 0) {
        writer.writeString(
            2,
            f
        );
    }
    f = message.getVersion();
    if (f.length > 0) {
        writer.writeString(
            3,
            f
        );
    }
};


/**
 * optional string path = 1;
 * @return {string}
 */
proto.protos.ChaincodeID.prototype.getPath = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.protos.ChaincodeID.prototype.setPath = function (value) {
    jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.protos.ChaincodeID.prototype.getName = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.protos.ChaincodeID.prototype.setName = function (value) {
    jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string version = 3;
 * @return {string}
 */
proto.protos.ChaincodeID.prototype.getVersion = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.protos.ChaincodeID.prototype.setVersion = function (value) {
    jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.ChaincodeInput = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.protos.ChaincodeInput.repeatedFields_, null);
};
goog.inherits(proto.protos.ChaincodeInput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.protos.ChaincodeInput.displayName = 'proto.protos.ChaincodeInput';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.protos.ChaincodeInput.repeatedFields_ = [1];


if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.protos.ChaincodeInput.prototype.toObject = function (opt_includeInstance) {
        return proto.protos.ChaincodeInput.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.protos.ChaincodeInput} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.protos.ChaincodeInput.toObject = function (includeInstance, msg) {
        var f, obj = {
            argsList: msg.getArgsList_asB64()
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.ChaincodeInput}
 */
proto.protos.ChaincodeInput.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.protos.ChaincodeInput;
    return proto.protos.ChaincodeInput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.ChaincodeInput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.ChaincodeInput}
 */
proto.protos.ChaincodeInput.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {!Uint8Array} */ (reader.readBytes());
                msg.addArgs(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.ChaincodeInput.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.protos.ChaincodeInput.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.ChaincodeInput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.ChaincodeInput.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getArgsList_asU8();
    if (f.length > 0) {
        writer.writeRepeatedBytes(
            1,
            f
        );
    }
};


/**
 * repeated bytes args = 1;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.protos.ChaincodeInput.prototype.getArgsList = function () {
    return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * repeated bytes args = 1;
 * This is a type-conversion wrapper around `getArgsList()`
 * @return {!Array.<string>}
 */
proto.protos.ChaincodeInput.prototype.getArgsList_asB64 = function () {
    return /** @type {!Array.<string>} */ (jspb.Message.bytesListAsB64(
        this.getArgsList()));
};


/**
 * repeated bytes args = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getArgsList()`
 * @return {!Array.<!Uint8Array>}
 */
proto.protos.ChaincodeInput.prototype.getArgsList_asU8 = function () {
    return /** @type {!Array.<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
        this.getArgsList()));
};


/** @param {!(Array<!Uint8Array>|Array<string>)} value */
proto.protos.ChaincodeInput.prototype.setArgsList = function (value) {
    jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 */
proto.protos.ChaincodeInput.prototype.addArgs = function (value, opt_index) {
    jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.protos.ChaincodeInput.prototype.clearArgsList = function () {
    this.setArgsList([]);
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.ChaincodeSpec = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protos.ChaincodeSpec, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.protos.ChaincodeSpec.displayName = 'proto.protos.ChaincodeSpec';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.protos.ChaincodeSpec.prototype.toObject = function (opt_includeInstance) {
        return proto.protos.ChaincodeSpec.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.protos.ChaincodeSpec} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.protos.ChaincodeSpec.toObject = function (includeInstance, msg) {
        var f, obj = {
            type: jspb.Message.getFieldWithDefault(msg, 1, 0),
            chaincodeId: (f = msg.getChaincodeId()) && proto.protos.ChaincodeID.toObject(includeInstance, f),
            input: (f = msg.getInput()) && proto.protos.ChaincodeInput.toObject(includeInstance, f),
            timeout: jspb.Message.getFieldWithDefault(msg, 4, 0)
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.ChaincodeSpec}
 */
proto.protos.ChaincodeSpec.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.protos.ChaincodeSpec;
    return proto.protos.ChaincodeSpec.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.ChaincodeSpec} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.ChaincodeSpec}
 */
proto.protos.ChaincodeSpec.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {!proto.protos.ChaincodeSpec.Type} */ (reader.readEnum());
                msg.setType(value);
                break;
            case 2:
                var value = new proto.protos.ChaincodeID;
                reader.readMessage(value, proto.protos.ChaincodeID.deserializeBinaryFromReader);
                msg.setChaincodeId(value);
                break;
            case 3:
                var value = new proto.protos.ChaincodeInput;
                reader.readMessage(value, proto.protos.ChaincodeInput.deserializeBinaryFromReader);
                msg.setInput(value);
                break;
            case 4:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setTimeout(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.ChaincodeSpec.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.protos.ChaincodeSpec.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.ChaincodeSpec} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.ChaincodeSpec.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getType();
    if (f !== 0.0) {
        writer.writeEnum(
            1,
            f
        );
    }
    f = message.getChaincodeId();
    if (f != null) {
        writer.writeMessage(
            2,
            f,
            proto.protos.ChaincodeID.serializeBinaryToWriter
        );
    }
    f = message.getInput();
    if (f != null) {
        writer.writeMessage(
            3,
            f,
            proto.protos.ChaincodeInput.serializeBinaryToWriter
        );
    }
    f = message.getTimeout();
    if (f !== 0) {
        writer.writeInt32(
            4,
            f
        );
    }
};


/**
 * @enum {number}
 */
proto.protos.ChaincodeSpec.Type = {
    UNDEFINED: 0,
    GOLANG: 1,
    NODE: 2,
    CAR: 3,
    JAVA: 4
};

/**
 * optional Type type = 1;
 * @return {!proto.protos.ChaincodeSpec.Type}
 */
proto.protos.ChaincodeSpec.prototype.getType = function () {
    return /** @type {!proto.protos.ChaincodeSpec.Type} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.protos.ChaincodeSpec.Type} value */
proto.protos.ChaincodeSpec.prototype.setType = function (value) {
    jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional ChaincodeID chaincode_id = 2;
 * @return {?proto.protos.ChaincodeID}
 */
proto.protos.ChaincodeSpec.prototype.getChaincodeId = function () {
    return /** @type{?proto.protos.ChaincodeID} */ (
        jspb.Message.getWrapperField(this, proto.protos.ChaincodeID, 2));
};


/** @param {?proto.protos.ChaincodeID|undefined} value */
proto.protos.ChaincodeSpec.prototype.setChaincodeId = function (value) {
    jspb.Message.setWrapperField(this, 2, value);
};


proto.protos.ChaincodeSpec.prototype.clearChaincodeId = function () {
    this.setChaincodeId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protos.ChaincodeSpec.prototype.hasChaincodeId = function () {
    return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ChaincodeInput input = 3;
 * @return {?proto.protos.ChaincodeInput}
 */
proto.protos.ChaincodeSpec.prototype.getInput = function () {
    return /** @type{?proto.protos.ChaincodeInput} */ (
        jspb.Message.getWrapperField(this, proto.protos.ChaincodeInput, 3));
};


/** @param {?proto.protos.ChaincodeInput|undefined} value */
proto.protos.ChaincodeSpec.prototype.setInput = function (value) {
    jspb.Message.setWrapperField(this, 3, value);
};


proto.protos.ChaincodeSpec.prototype.clearInput = function () {
    this.setInput(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protos.ChaincodeSpec.prototype.hasInput = function () {
    return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int32 timeout = 4;
 * @return {number}
 */
proto.protos.ChaincodeSpec.prototype.getTimeout = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.protos.ChaincodeSpec.prototype.setTimeout = function (value) {
    jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.SenderSpec = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protos.SenderSpec, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.protos.SenderSpec.displayName = 'proto.protos.SenderSpec';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.protos.SenderSpec.prototype.toObject = function (opt_includeInstance) {
        return proto.protos.SenderSpec.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.protos.SenderSpec} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.protos.SenderSpec.toObject = function (includeInstance, msg) {
        var f, obj = {
            sender: msg.getSender_asB64(),
            counter: jspb.Message.getFieldWithDefault(msg, 2, 0),
            inkLimit: msg.getInkLimit_asB64(),
            msg: msg.getMsg_asB64()
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.SenderSpec}
 */
proto.protos.SenderSpec.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.protos.SenderSpec;
    return proto.protos.SenderSpec.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.SenderSpec} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.SenderSpec}
 */
proto.protos.SenderSpec.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {!Uint8Array} */ (reader.readBytes());
                msg.setSender(value);
                break;
            case 2:
                var value = /** @type {number} */ (reader.readUint64());
                msg.setCounter(value);
                break;
            case 3:
                var value = /** @type {!Uint8Array} */ (reader.readBytes());
                msg.setInkLimit(value);
                break;
            case 4:
                var value = /** @type {!Uint8Array} */ (reader.readBytes());
                msg.setMsg(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.SenderSpec.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.protos.SenderSpec.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.SenderSpec} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.SenderSpec.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getSender_asU8();
    if (f.length > 0) {
        writer.writeBytes(
            1,
            f
        );
    }
    f = message.getCounter();
    if (f !== 0) {
        writer.writeUint64(
            2,
            f
        );
    }
    f = message.getInkLimit_asU8();
    if (f.length > 0) {
        writer.writeBytes(
            3,
            f
        );
    }
    f = message.getMsg_asU8();
    if (f.length > 0) {
        writer.writeBytes(
            4,
            f
        );
    }
};


/**
 * optional bytes sender = 1;
 * @return {!(string|Uint8Array)}
 */
proto.protos.SenderSpec.prototype.getSender = function () {
    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes sender = 1;
 * This is a type-conversion wrapper around `getSender()`
 * @return {string}
 */
proto.protos.SenderSpec.prototype.getSender_asB64 = function () {
    return /** @type {string} */ (jspb.Message.bytesAsB64(
        this.getSender()));
};


/**
 * optional bytes sender = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSender()`
 * @return {!Uint8Array}
 */
proto.protos.SenderSpec.prototype.getSender_asU8 = function () {
    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
        this.getSender()));
};


/** @param {!(string|Uint8Array)} value */
proto.protos.SenderSpec.prototype.setSender = function (value) {
    jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional uint64 counter = 2;
 * @return {number}
 */
proto.protos.SenderSpec.prototype.getCounter = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protos.SenderSpec.prototype.setCounter = function (value) {
    jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bytes ink_limit = 3;
 * @return {!(string|Uint8Array)}
 */
proto.protos.SenderSpec.prototype.getInkLimit = function () {
    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes ink_limit = 3;
 * This is a type-conversion wrapper around `getInkLimit()`
 * @return {string}
 */
proto.protos.SenderSpec.prototype.getInkLimit_asB64 = function () {
    return /** @type {string} */ (jspb.Message.bytesAsB64(
        this.getInkLimit()));
};


/**
 * optional bytes ink_limit = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getInkLimit()`
 * @return {!Uint8Array}
 */
proto.protos.SenderSpec.prototype.getInkLimit_asU8 = function () {
    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
        this.getInkLimit()));
};


/** @param {!(string|Uint8Array)} value */
proto.protos.SenderSpec.prototype.setInkLimit = function (value) {
    jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional bytes msg = 4;
 * @return {!(string|Uint8Array)}
 */
proto.protos.SenderSpec.prototype.getMsg = function () {
    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes msg = 4;
 * This is a type-conversion wrapper around `getMsg()`
 * @return {string}
 */
proto.protos.SenderSpec.prototype.getMsg_asB64 = function () {
    return /** @type {string} */ (jspb.Message.bytesAsB64(
        this.getMsg()));
};


/**
 * optional bytes msg = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMsg()`
 * @return {!Uint8Array}
 */
proto.protos.SenderSpec.prototype.getMsg_asU8 = function () {
    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
        this.getMsg()));
};


/** @param {!(string|Uint8Array)} value */
proto.protos.SenderSpec.prototype.setMsg = function (value) {
    jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.SignContent = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protos.SignContent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.protos.SignContent.displayName = 'proto.protos.SignContent';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.protos.SignContent.prototype.toObject = function (opt_includeInstance) {
        return proto.protos.SignContent.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.protos.SignContent} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.protos.SignContent.toObject = function (includeInstance, msg) {
        var f, obj = {
            chaincodeSpec: (f = msg.getChaincodeSpec()) && proto.protos.ChaincodeSpec.toObject(includeInstance, f),
            idGenerationAlg: jspb.Message.getFieldWithDefault(msg, 2, ""),
            senderSpec: (f = msg.getSenderSpec()) && proto.protos.SenderSpec.toObject(includeInstance, f)
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.SignContent}
 */
proto.protos.SignContent.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.protos.SignContent;
    return proto.protos.SignContent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.SignContent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.SignContent}
 */
proto.protos.SignContent.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new proto.protos.ChaincodeSpec;
                reader.readMessage(value, proto.protos.ChaincodeSpec.deserializeBinaryFromReader);
                msg.setChaincodeSpec(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setIdGenerationAlg(value);
                break;
            case 3:
                var value = new proto.protos.SenderSpec;
                reader.readMessage(value, proto.protos.SenderSpec.deserializeBinaryFromReader);
                msg.setSenderSpec(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.SignContent.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.protos.SignContent.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.SignContent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.SignContent.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getChaincodeSpec();
    if (f != null) {
        writer.writeMessage(
            1,
            f,
            proto.protos.ChaincodeSpec.serializeBinaryToWriter
        );
    }
    f = message.getIdGenerationAlg();
    if (f.length > 0) {
        writer.writeString(
            2,
            f
        );
    }
    f = message.getSenderSpec();
    if (f != null) {
        writer.writeMessage(
            3,
            f,
            proto.protos.SenderSpec.serializeBinaryToWriter
        );
    }
};


/**
 * optional ChaincodeSpec chaincode_spec = 1;
 * @return {?proto.protos.ChaincodeSpec}
 */
proto.protos.SignContent.prototype.getChaincodeSpec = function () {
    return /** @type{?proto.protos.ChaincodeSpec} */ (
        jspb.Message.getWrapperField(this, proto.protos.ChaincodeSpec, 1));
};


/** @param {?proto.protos.ChaincodeSpec|undefined} value */
proto.protos.SignContent.prototype.setChaincodeSpec = function (value) {
    jspb.Message.setWrapperField(this, 1, value);
};


proto.protos.SignContent.prototype.clearChaincodeSpec = function () {
    this.setChaincodeSpec(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protos.SignContent.prototype.hasChaincodeSpec = function () {
    return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string id_generation_alg = 2;
 * @return {string}
 */
proto.protos.SignContent.prototype.getIdGenerationAlg = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.protos.SignContent.prototype.setIdGenerationAlg = function (value) {
    jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional SenderSpec sender_spec = 3;
 * @return {?proto.protos.SenderSpec}
 */
proto.protos.SignContent.prototype.getSenderSpec = function () {
    return /** @type{?proto.protos.SenderSpec} */ (
        jspb.Message.getWrapperField(this, proto.protos.SenderSpec, 3));
};


/** @param {?proto.protos.SenderSpec|undefined} value */
proto.protos.SignContent.prototype.setSenderSpec = function (value) {
    jspb.Message.setWrapperField(this, 3, value);
};


proto.protos.SignContent.prototype.clearSenderSpec = function () {
    this.setSenderSpec(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protos.SignContent.prototype.hasSenderSpec = function () {
    return jspb.Message.getField(this, 3) != null;
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.ChaincodeDeploymentSpec = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protos.ChaincodeDeploymentSpec, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.protos.ChaincodeDeploymentSpec.displayName = 'proto.protos.ChaincodeDeploymentSpec';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.protos.ChaincodeDeploymentSpec.prototype.toObject = function (opt_includeInstance) {
        return proto.protos.ChaincodeDeploymentSpec.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.protos.ChaincodeDeploymentSpec} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.protos.ChaincodeDeploymentSpec.toObject = function (includeInstance, msg) {
        var f, obj = {
            chaincodeSpec: (f = msg.getChaincodeSpec()) && proto.protos.ChaincodeSpec.toObject(includeInstance, f),
            effectiveDate: (f = msg.getEffectiveDate()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
            codePackage: msg.getCodePackage_asB64(),
            execEnv: jspb.Message.getFieldWithDefault(msg, 4, 0)
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.ChaincodeDeploymentSpec}
 */
proto.protos.ChaincodeDeploymentSpec.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.protos.ChaincodeDeploymentSpec;
    return proto.protos.ChaincodeDeploymentSpec.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.ChaincodeDeploymentSpec} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.ChaincodeDeploymentSpec}
 */
proto.protos.ChaincodeDeploymentSpec.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new proto.protos.ChaincodeSpec;
                reader.readMessage(value, proto.protos.ChaincodeSpec.deserializeBinaryFromReader);
                msg.setChaincodeSpec(value);
                break;
            case 2:
                var value = new google_protobuf_timestamp_pb.Timestamp;
                reader.readMessage(value, google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
                msg.setEffectiveDate(value);
                break;
            case 3:
                var value = /** @type {!Uint8Array} */ (reader.readBytes());
                msg.setCodePackage(value);
                break;
            case 4:
                var value = /** @type {!proto.protos.ChaincodeDeploymentSpec.ExecutionEnvironment} */ (reader.readEnum());
                msg.setExecEnv(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.ChaincodeDeploymentSpec.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.protos.ChaincodeDeploymentSpec.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.ChaincodeDeploymentSpec} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.ChaincodeDeploymentSpec.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getChaincodeSpec();
    if (f != null) {
        writer.writeMessage(
            1,
            f,
            proto.protos.ChaincodeSpec.serializeBinaryToWriter
        );
    }
    f = message.getEffectiveDate();
    if (f != null) {
        writer.writeMessage(
            2,
            f,
            google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
        );
    }
    f = message.getCodePackage_asU8();
    if (f.length > 0) {
        writer.writeBytes(
            3,
            f
        );
    }
    f = message.getExecEnv();
    if (f !== 0.0) {
        writer.writeEnum(
            4,
            f
        );
    }
};


/**
 * @enum {number}
 */
proto.protos.ChaincodeDeploymentSpec.ExecutionEnvironment = {
    DOCKER: 0,
    SYSTEM: 1
};

/**
 * optional ChaincodeSpec chaincode_spec = 1;
 * @return {?proto.protos.ChaincodeSpec}
 */
proto.protos.ChaincodeDeploymentSpec.prototype.getChaincodeSpec = function () {
    return /** @type{?proto.protos.ChaincodeSpec} */ (
        jspb.Message.getWrapperField(this, proto.protos.ChaincodeSpec, 1));
};


/** @param {?proto.protos.ChaincodeSpec|undefined} value */
proto.protos.ChaincodeDeploymentSpec.prototype.setChaincodeSpec = function (value) {
    jspb.Message.setWrapperField(this, 1, value);
};


proto.protos.ChaincodeDeploymentSpec.prototype.clearChaincodeSpec = function () {
    this.setChaincodeSpec(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protos.ChaincodeDeploymentSpec.prototype.hasChaincodeSpec = function () {
    return jspb.Message.getField(this, 1) != null;
};


/**
 * optional google.protobuf.Timestamp effective_date = 2;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.protos.ChaincodeDeploymentSpec.prototype.getEffectiveDate = function () {
    return /** @type{?proto.google.protobuf.Timestamp} */ (
        jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 2));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.protos.ChaincodeDeploymentSpec.prototype.setEffectiveDate = function (value) {
    jspb.Message.setWrapperField(this, 2, value);
};


proto.protos.ChaincodeDeploymentSpec.prototype.clearEffectiveDate = function () {
    this.setEffectiveDate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protos.ChaincodeDeploymentSpec.prototype.hasEffectiveDate = function () {
    return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bytes code_package = 3;
 * @return {!(string|Uint8Array)}
 */
proto.protos.ChaincodeDeploymentSpec.prototype.getCodePackage = function () {
    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes code_package = 3;
 * This is a type-conversion wrapper around `getCodePackage()`
 * @return {string}
 */
proto.protos.ChaincodeDeploymentSpec.prototype.getCodePackage_asB64 = function () {
    return /** @type {string} */ (jspb.Message.bytesAsB64(
        this.getCodePackage()));
};


/**
 * optional bytes code_package = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCodePackage()`
 * @return {!Uint8Array}
 */
proto.protos.ChaincodeDeploymentSpec.prototype.getCodePackage_asU8 = function () {
    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
        this.getCodePackage()));
};


/** @param {!(string|Uint8Array)} value */
proto.protos.ChaincodeDeploymentSpec.prototype.setCodePackage = function (value) {
    jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional ExecutionEnvironment exec_env = 4;
 * @return {!proto.protos.ChaincodeDeploymentSpec.ExecutionEnvironment}
 */
proto.protos.ChaincodeDeploymentSpec.prototype.getExecEnv = function () {
    return /** @type {!proto.protos.ChaincodeDeploymentSpec.ExecutionEnvironment} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {!proto.protos.ChaincodeDeploymentSpec.ExecutionEnvironment} value */
proto.protos.ChaincodeDeploymentSpec.prototype.setExecEnv = function (value) {
    jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.ChaincodeInvocationSpec = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protos.ChaincodeInvocationSpec, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.protos.ChaincodeInvocationSpec.displayName = 'proto.protos.ChaincodeInvocationSpec';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.protos.ChaincodeInvocationSpec.prototype.toObject = function (opt_includeInstance) {
        return proto.protos.ChaincodeInvocationSpec.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.protos.ChaincodeInvocationSpec} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.protos.ChaincodeInvocationSpec.toObject = function (includeInstance, msg) {
        var f, obj = {
            chaincodeSpec: (f = msg.getChaincodeSpec()) && proto.protos.ChaincodeSpec.toObject(includeInstance, f),
            idGenerationAlg: jspb.Message.getFieldWithDefault(msg, 2, ""),
            senderSpec: (f = msg.getSenderSpec()) && proto.protos.SenderSpec.toObject(includeInstance, f),
            sig: msg.getSig_asB64()
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.ChaincodeInvocationSpec}
 */
proto.protos.ChaincodeInvocationSpec.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.protos.ChaincodeInvocationSpec;
    return proto.protos.ChaincodeInvocationSpec.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.ChaincodeInvocationSpec} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.ChaincodeInvocationSpec}
 */
proto.protos.ChaincodeInvocationSpec.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new proto.protos.ChaincodeSpec;
                reader.readMessage(value, proto.protos.ChaincodeSpec.deserializeBinaryFromReader);
                msg.setChaincodeSpec(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setIdGenerationAlg(value);
                break;
            case 3:
                var value = new proto.protos.SenderSpec;
                reader.readMessage(value, proto.protos.SenderSpec.deserializeBinaryFromReader);
                msg.setSenderSpec(value);
                break;
            case 4:
                var value = /** @type {!Uint8Array} */ (reader.readBytes());
                msg.setSig(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.ChaincodeInvocationSpec.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.protos.ChaincodeInvocationSpec.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.ChaincodeInvocationSpec} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.ChaincodeInvocationSpec.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getChaincodeSpec();
    if (f != null) {
        writer.writeMessage(
            1,
            f,
            proto.protos.ChaincodeSpec.serializeBinaryToWriter
        );
    }
    f = message.getIdGenerationAlg();
    if (f.length > 0) {
        writer.writeString(
            2,
            f
        );
    }
    f = message.getSenderSpec();
    if (f != null) {
        writer.writeMessage(
            3,
            f,
            proto.protos.SenderSpec.serializeBinaryToWriter
        );
    }
    f = message.getSig_asU8();
    if (f.length > 0) {
        writer.writeBytes(
            4,
            f
        );
    }
};


/**
 * optional ChaincodeSpec chaincode_spec = 1;
 * @return {?proto.protos.ChaincodeSpec}
 */
proto.protos.ChaincodeInvocationSpec.prototype.getChaincodeSpec = function () {
    return /** @type{?proto.protos.ChaincodeSpec} */ (
        jspb.Message.getWrapperField(this, proto.protos.ChaincodeSpec, 1));
};


/** @param {?proto.protos.ChaincodeSpec|undefined} value */
proto.protos.ChaincodeInvocationSpec.prototype.setChaincodeSpec = function (value) {
    jspb.Message.setWrapperField(this, 1, value);
};


proto.protos.ChaincodeInvocationSpec.prototype.clearChaincodeSpec = function () {
    this.setChaincodeSpec(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protos.ChaincodeInvocationSpec.prototype.hasChaincodeSpec = function () {
    return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string id_generation_alg = 2;
 * @return {string}
 */
proto.protos.ChaincodeInvocationSpec.prototype.getIdGenerationAlg = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.protos.ChaincodeInvocationSpec.prototype.setIdGenerationAlg = function (value) {
    jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional SenderSpec sender_spec = 3;
 * @return {?proto.protos.SenderSpec}
 */
proto.protos.ChaincodeInvocationSpec.prototype.getSenderSpec = function () {
    return /** @type{?proto.protos.SenderSpec} */ (
        jspb.Message.getWrapperField(this, proto.protos.SenderSpec, 3));
};


/** @param {?proto.protos.SenderSpec|undefined} value */
proto.protos.ChaincodeInvocationSpec.prototype.setSenderSpec = function (value) {
    jspb.Message.setWrapperField(this, 3, value);
};


proto.protos.ChaincodeInvocationSpec.prototype.clearSenderSpec = function () {
    this.setSenderSpec(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protos.ChaincodeInvocationSpec.prototype.hasSenderSpec = function () {
    return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bytes sig = 4;
 * @return {!(string|Uint8Array)}
 */
proto.protos.ChaincodeInvocationSpec.prototype.getSig = function () {
    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes sig = 4;
 * This is a type-conversion wrapper around `getSig()`
 * @return {string}
 */
proto.protos.ChaincodeInvocationSpec.prototype.getSig_asB64 = function () {
    return /** @type {string} */ (jspb.Message.bytesAsB64(
        this.getSig()));
};


/**
 * optional bytes sig = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSig()`
 * @return {!Uint8Array}
 */
proto.protos.ChaincodeInvocationSpec.prototype.getSig_asU8 = function () {
    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
        this.getSig()));
};


/** @param {!(string|Uint8Array)} value */
proto.protos.ChaincodeInvocationSpec.prototype.setSig = function (value) {
    jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * @enum {number}
 */
proto.protos.ConfidentialityLevel = {
    PUBLIC: 0,
    CONFIDENTIAL: 1
};

goog.object.extend(exports, proto.protos);
